name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:

  build-win:

    permissions: write-all

    runs-on: windows-2019

    steps:

      - uses: actions/checkout@v2

      - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Create archive
        run: 7z a win_ar.zip ${{github.workspace}}/build/Release/server.exe

      - uses: actions/upload-artifact@v2
        with:
          name: my-win-artifact
          path: ${{github.workspace}}/win_ar.zip


  build-linux:

    permissions: write-all

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Create archive
        run: 7z a linux_ar.zip ${{github.workspace}}/build/server

      - uses: actions/upload-artifact@v2
        with:
          name: my-linux-artifact
          path: ${{github.workspace}}/linux_ar.zip


  release:

    permissions: write-all

    runs-on: ubuntu-latest

    needs: [ build-win, build-linux ]

    if: github.ref == 'refs/heads/main'

    steps:

      - uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - uses: actions/download-artifact@v2
        with:
          name: my-win-artifact
          path: ./

      - uses: actions/download-artifact@v2
        with:
          name: my-linux-artifact
          path: ./

      - name: Upload Archive Asset Win
        id: upload-archive-asset-win
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./win_ar.zip
          asset_name: my-win-artifact.zip
          asset_content_type: application/zip

      - name: Upload Archive Asset Linux
        id: upload-archive-asset-lin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux_ar.zip
          asset_name: my-linux-artifact.zip
          asset_content_type: application/zip
